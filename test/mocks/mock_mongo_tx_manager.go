// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"go.mongodb.org/mongo-driver/mongo"
)

// NewMockTxManager creates a new instance of MockTxManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTxManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTxManager {
	mock := &MockTxManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTxManager is an autogenerated mock type for the TxManager type
type MockTxManager struct {
	mock.Mock
}

type MockTxManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTxManager) EXPECT() *MockTxManager_Expecter {
	return &MockTxManager_Expecter{mock: &_m.Mock}
}

// BeginTx provides a mock function for the type MockTxManager
func (_mock *MockTxManager) BeginTx(ctx context.Context) (mongo.SessionContext, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for BeginTx")
	}

	var r0 mongo.SessionContext
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (mongo.SessionContext, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) mongo.SessionContext); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongo.SessionContext)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTxManager_BeginTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BeginTx'
type MockTxManager_BeginTx_Call struct {
	*mock.Call
}

// BeginTx is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockTxManager_Expecter) BeginTx(ctx interface{}) *MockTxManager_BeginTx_Call {
	return &MockTxManager_BeginTx_Call{Call: _e.mock.On("BeginTx", ctx)}
}

func (_c *MockTxManager_BeginTx_Call) Run(run func(ctx context.Context)) *MockTxManager_BeginTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTxManager_BeginTx_Call) Return(sessionContext mongo.SessionContext, err error) *MockTxManager_BeginTx_Call {
	_c.Call.Return(sessionContext, err)
	return _c
}

func (_c *MockTxManager_BeginTx_Call) RunAndReturn(run func(ctx context.Context) (mongo.SessionContext, error)) *MockTxManager_BeginTx_Call {
	_c.Call.Return(run)
	return _c
}

// Commit provides a mock function for the type MockTxManager
func (_mock *MockTxManager) Commit(sessionCtx mongo.SessionContext) error {
	ret := _mock.Called(sessionCtx)

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(mongo.SessionContext) error); ok {
		r0 = returnFunc(sessionCtx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTxManager_Commit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Commit'
type MockTxManager_Commit_Call struct {
	*mock.Call
}

// Commit is a helper method to define mock.On call
//   - sessionCtx mongo.SessionContext
func (_e *MockTxManager_Expecter) Commit(sessionCtx interface{}) *MockTxManager_Commit_Call {
	return &MockTxManager_Commit_Call{Call: _e.mock.On("Commit", sessionCtx)}
}

func (_c *MockTxManager_Commit_Call) Run(run func(sessionCtx mongo.SessionContext)) *MockTxManager_Commit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 mongo.SessionContext
		if args[0] != nil {
			arg0 = args[0].(mongo.SessionContext)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTxManager_Commit_Call) Return(err error) *MockTxManager_Commit_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTxManager_Commit_Call) RunAndReturn(run func(sessionCtx mongo.SessionContext) error) *MockTxManager_Commit_Call {
	_c.Call.Return(run)
	return _c
}

// Rollback provides a mock function for the type MockTxManager
func (_mock *MockTxManager) Rollback(sessionCtx mongo.SessionContext) error {
	ret := _mock.Called(sessionCtx)

	if len(ret) == 0 {
		panic("no return value specified for Rollback")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(mongo.SessionContext) error); ok {
		r0 = returnFunc(sessionCtx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTxManager_Rollback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Rollback'
type MockTxManager_Rollback_Call struct {
	*mock.Call
}

// Rollback is a helper method to define mock.On call
//   - sessionCtx mongo.SessionContext
func (_e *MockTxManager_Expecter) Rollback(sessionCtx interface{}) *MockTxManager_Rollback_Call {
	return &MockTxManager_Rollback_Call{Call: _e.mock.On("Rollback", sessionCtx)}
}

func (_c *MockTxManager_Rollback_Call) Run(run func(sessionCtx mongo.SessionContext)) *MockTxManager_Rollback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 mongo.SessionContext
		if args[0] != nil {
			arg0 = args[0].(mongo.SessionContext)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTxManager_Rollback_Call) Return(err error) *MockTxManager_Rollback_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTxManager_Rollback_Call) RunAndReturn(run func(sessionCtx mongo.SessionContext) error) *MockTxManager_Rollback_Call {
	_c.Call.Return(run)
	return _c
}

// WithTransaction provides a mock function for the type MockTxManager
func (_mock *MockTxManager) WithTransaction(ctx context.Context, fn func(sessCtx context.Context) (any, error)) (any, error) {
	ret := _mock.Called(ctx, fn)

	if len(ret) == 0 {
		panic("no return value specified for WithTransaction")
	}

	var r0 any
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, func(sessCtx context.Context) (any, error)) (any, error)); ok {
		return returnFunc(ctx, fn)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, func(sessCtx context.Context) (any, error)) any); ok {
		r0 = returnFunc(ctx, fn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, func(sessCtx context.Context) (any, error)) error); ok {
		r1 = returnFunc(ctx, fn)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTxManager_WithTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithTransaction'
type MockTxManager_WithTransaction_Call struct {
	*mock.Call
}

// WithTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - fn func(sessCtx context.Context) (any, error)
func (_e *MockTxManager_Expecter) WithTransaction(ctx interface{}, fn interface{}) *MockTxManager_WithTransaction_Call {
	return &MockTxManager_WithTransaction_Call{Call: _e.mock.On("WithTransaction", ctx, fn)}
}

func (_c *MockTxManager_WithTransaction_Call) Run(run func(ctx context.Context, fn func(sessCtx context.Context) (any, error))) *MockTxManager_WithTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 func(sessCtx context.Context) (any, error)
		if args[1] != nil {
			arg1 = args[1].(func(sessCtx context.Context) (any, error))
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTxManager_WithTransaction_Call) Return(v any, err error) *MockTxManager_WithTransaction_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockTxManager_WithTransaction_Call) RunAndReturn(run func(ctx context.Context, fn func(sessCtx context.Context) (any, error)) (any, error)) *MockTxManager_WithTransaction_Call {
	_c.Call.Return(run)
	return _c
}
