// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/Sokol111/ecommerce-commons/pkg/kafka/outbox"
	mock "github.com/stretchr/testify/mock"
)

// NewMockOutbox creates a new instance of MockOutbox. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOutbox(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOutbox {
	mock := &MockOutbox{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockOutbox is an autogenerated mock type for the Outbox type
type MockOutbox struct {
	mock.Mock
}

type MockOutbox_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOutbox) EXPECT() *MockOutbox_Expecter {
	return &MockOutbox_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockOutbox
func (_mock *MockOutbox) Create(ctx context.Context, event any, key string, topic string) (outbox.SendFunc, error) {
	ret := _mock.Called(ctx, event, key, topic)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 outbox.SendFunc
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, any, string, string) (outbox.SendFunc, error)); ok {
		return returnFunc(ctx, event, key, topic)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, any, string, string) outbox.SendFunc); ok {
		r0 = returnFunc(ctx, event, key, topic)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(outbox.SendFunc)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, any, string, string) error); ok {
		r1 = returnFunc(ctx, event, key, topic)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOutbox_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockOutbox_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - event any
//   - key string
//   - topic string
func (_e *MockOutbox_Expecter) Create(ctx interface{}, event interface{}, key interface{}, topic interface{}) *MockOutbox_Create_Call {
	return &MockOutbox_Create_Call{Call: _e.mock.On("Create", ctx, event, key, topic)}
}

func (_c *MockOutbox_Create_Call) Run(run func(ctx context.Context, event any, key string, topic string)) *MockOutbox_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 any
		if args[1] != nil {
			arg1 = args[1].(any)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockOutbox_Create_Call) Return(sendFunc outbox.SendFunc, err error) *MockOutbox_Create_Call {
	_c.Call.Return(sendFunc, err)
	return _c
}

func (_c *MockOutbox_Create_Call) RunAndReturn(run func(ctx context.Context, event any, key string, topic string) (outbox.SendFunc, error)) *MockOutbox_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function for the type MockOutbox
func (_mock *MockOutbox) Start() {
	_mock.Called()
	return
}

// MockOutbox_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockOutbox_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *MockOutbox_Expecter) Start() *MockOutbox_Start_Call {
	return &MockOutbox_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *MockOutbox_Start_Call) Run(run func()) *MockOutbox_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockOutbox_Start_Call) Return() *MockOutbox_Start_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockOutbox_Start_Call) RunAndReturn(run func()) *MockOutbox_Start_Call {
	_c.Run(run)
	return _c
}

// Stop provides a mock function for the type MockOutbox
func (_mock *MockOutbox) Stop(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockOutbox_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockOutbox_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockOutbox_Expecter) Stop(ctx interface{}) *MockOutbox_Stop_Call {
	return &MockOutbox_Stop_Call{Call: _e.mock.On("Stop", ctx)}
}

func (_c *MockOutbox_Stop_Call) Run(run func(ctx context.Context)) *MockOutbox_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockOutbox_Stop_Call) Return(err error) *MockOutbox_Stop_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockOutbox_Stop_Call) RunAndReturn(run func(ctx context.Context) error) *MockOutbox_Stop_Call {
	_c.Call.Return(run)
	return _c
}
